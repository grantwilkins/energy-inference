Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:22<00:22, 22.28s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:32<00:00, 14.95s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:32<00:00, 16.05s/it]
Token indices sequence length is longer than the specified maximum sequence length for this model (2050 > 2048). Running this sequence through the model will result in indexing errors
Setting `pad_token_id` to `eos_token_id`:11 for open-end generation.
This is a friendly reminder - the current text generation call will exceed the model's predefined maximum length (2048). Depending on the model, you may observe exceptions, performance degradation, or nothing at all.
Traceback (most recent call last):
  File "/home/gfwilki/energy-inference/cuda/cuda.py", line 537, in <module>
    llm_output = run_inference(
                 ^^^^^^^^^^^^^^
  File "/home/gfwilki/energy-inference/cuda/cuda.py", line 47, in run_inference
    sequences = pipe(
                ^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/pipelines/text_generation.py", line 241, in __call__
    return super().__call__(text_inputs, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/pipelines/base.py", line 1196, in __call__
    return self.run_single(inputs, preprocess_params, forward_params, postprocess_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/pipelines/base.py", line 1203, in run_single
    model_outputs = self.forward(model_inputs, **forward_params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/pipelines/base.py", line 1102, in forward
    model_outputs = self._forward(model_inputs, **forward_params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/pipelines/text_generation.py", line 328, in _forward
    generated_sequence = self.model.generate(input_ids=input_ids, attention_mask=attention_mask, **generate_kwargs)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/generation/utils.py", line 1592, in generate
    return self.sample(
           ^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/generation/utils.py", line 2696, in sample
    outputs = self(
              ^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/models/falcon/modeling_falcon.py", line 1282, in forward
    transformer_outputs = self.transformer(
                          ^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/models/falcon/modeling_falcon.py", line 1161, in forward
    outputs = block(
              ^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/models/falcon/modeling_falcon.py", line 811, in forward
    attn_outputs = self.self_attention(
                   ^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/gfwilki/.conda/envs/energy-inference/lib/python3.12/site-packages/transformers/models/falcon/modeling_falcon.py", line 450, in forward
    attn_output = F.scaled_dot_product_attention(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 572.00 MiB. GPU 0 has a total capacity of 15.77 GiB of which 52.44 MiB is free. Including non-PyTorch memory, this process has 15.58 GiB memory in use. Of the allocated memory 13.87 GiB is allocated by PyTorch, and 830.14 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
